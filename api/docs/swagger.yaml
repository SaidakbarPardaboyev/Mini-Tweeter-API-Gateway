definitions:
  models.CreateUser:
    properties:
      bio:
        type: string
      name:
        type: string
      password:
        type: string
      profile_image:
        type: string
      surname:
        type: string
      username:
        type: string
    type: object
  models.FollowRequest:
    properties:
      follower_id:
        type: string
      following_id:
        type: string
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.LogoutRequest:
    properties:
      user_id:
        type: string
    type: object
  models.Response:
    properties:
      code:
        type: string
      data: {}
      message:
        type: string
    type: object
  models.UnFollowRequest:
    properties:
      follower_id:
        type: string
      following_id:
        type: string
    type: object
  models.UpdateUser:
    properties:
      bio:
        type: string
      id:
        type: string
      name:
        type: string
      password:
        type: string
      profile_image:
        type: string
      surname:
        type: string
      username:
        type: string
    type: object
info:
  contact: {}
  description: This is a MiniTweeter API Gateway server.
  title: MiniTweeter API Gateway v1
  version: "1.0"
paths:
  /v1/auth/login:
    post:
      consumes:
      - application/json
      description: API for user login
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      summary: User Login
      tags:
      - auth
  /v1/auth/logout:
    post:
      consumes:
      - application/json
      description: API for user to logout - actually used to delete session, `Authorization`
        required
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.LogoutRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      summary: Logout Endpoint
      tags:
      - auth
  /v1/auth/sign-up:
    post:
      consumes:
      - application/json
      description: API for user sign up
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      summary: User Sign Up
      tags:
      - auth
  /v1/file/delete:
    delete:
      description: API for deleting a file from MinIO
      parameters:
      - description: Filename to delete
        in: query
        name: filename
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid request
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Failed to delete file
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Delete File from MinIO
      tags:
      - upload
  /v1/file/upload:
    post:
      consumes:
      - multipart/form-data
      description: API for uploading a file to MinIO and returning its URL
      parameters:
      - description: File to upload
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "400":
          description: Invalid file
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Failed to upload file
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Upload File to MinIO
      tags:
      - upload
  /v1/followings/follow:
    post:
      consumes:
      - application/json
      description: API for follow a user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.FollowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Follow a user
      tags:
      - followings
  /v1/followings/list-followers:
    get:
      consumes:
      - application/json
      description: API for getting followers list with pagination and search
      parameters:
      - description: user id
        in: query
        name: id
        required: true
        type: string
      - description: 'Page number {default: 1}'
        in: query
        name: page
        type: integer
      - description: 'Limit number {default: 10}'
        in: query
        name: limit
        type: integer
      - description: Search keyword (name, surname, username, bio, etc.)
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Get Followers List With Pagination
      tags:
      - followings
  /v1/followings/list-followings:
    get:
      consumes:
      - application/json
      description: API for getting followings list with pagination and search
      parameters:
      - description: user id
        in: query
        name: id
        required: true
        type: string
      - description: 'Page number {default: 1}'
        in: query
        name: page
        type: integer
      - description: 'Limit number {default: 10}'
        in: query
        name: limit
        type: integer
      - description: Search keyword (name, surname, username, bio, etc.)
        in: query
        name: search
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Get Followings List With Pagination
      tags:
      - followings
  /v1/followings/unfollow:
    post:
      consumes:
      - application/json
      description: API for unfollow a user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UnFollowRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: UnFollow a user
      tags:
      - followings
  /v1/users:
    post:
      consumes:
      - application/json
      description: API for creating user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: User Create
      tags:
      - users
    put:
      consumes:
      - application/json
      description: API for updating user
      parameters:
      - description: request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/models.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: User Update
      tags:
      - users
  /v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: API for deleting user
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Delete User
      tags:
      - users
    get:
      consumes:
      - application/json
      description: API for getting user by id
      parameters:
      - description: id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Get User By ID
      tags:
      - users
  /v1/users/list:
    get:
      consumes:
      - application/json
      description: API for getting users list with pagination and filters
      parameters:
      - description: 'Page number {default: 1}'
        in: query
        name: page
        type: integer
      - description: 'Limit number {default: 10}'
        in: query
        name: limit
        type: integer
      - description: Search keyword (role, login, fullname, phone, etc.)
        in: query
        name: search
        type: string
      - description: Sort field
        in: query
        name: sort_by
        type: string
      - description: Sorting order (asc or desc)
        in: query
        name: order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Response'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/models.Response'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/models.Response'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/models.Response'
        default:
          description: ""
          schema:
            $ref: '#/definitions/models.Response'
      security:
      - BearerAuth: []
      summary: Get Users List With Pagination
      tags:
      - users
securityDefinitions:
  BearerAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
